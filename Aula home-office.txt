1- 1) Copie, cole e execute o seguinte código chamado ORDENAÇÃO POR FORÇA BRUTA: OK.

2) Execute o código ORDENAÇÃO POR FORÇA BRUTA 20 vezes e anote os tempos de execução em uma tabela.

1°- 0.5 ms.
2°- 0.4000000059604645 ms.
3°- 0.29999999701976776 ms.
4°- 0.4000000059604645 ms.
5°- 0.5 ms.
6°- 0.4000000059604645 ms.
7°- 0.4000000059604645 ms.
8°- 0.29999999701976776 ms.
9°- 0.5 ms.
10°- 0.29999999701976776 ms.
11°- 0.8999999910593033 ms.
12°- 0.29999999701976776 ms.
13°- 0.4000000059604645 ms.
14°- 0.5999999940395355 ms.
15°- 0.3999999910593033 ms.
16°- 0.7999999970197678 ms.
17°- 0.29999999701976776 ms.
18°- 0.9000000059604645 ms.
19°- 0.7999999970197678 ms.
20°- 0.4000000059604645 ms.

3) Calcule a média dos tempos de execução do algoritmo ORDENAÇÃO POR FORÇA BRUTA.
Média é = 0.020750000029802322.

4) Copie, cole e execute o seguinte código chamado ORDENAÇÂO POR INSERÇÃO:
OK.

5) Execute o código ORDENAÇÃO POR INSERÇÃO 20 vezes e anote os tempos de execução em uma tabela.

1°- 0.09999999403953552 ms.
2°- 0.09999999403953552 ms.
3°- 0.19999998807907104 ms.
4°- 0 ms.
5°- 0.20000000298023224 ms.
6°- 0 ms.
7°- 0.5 ms.
8°- 0.09999999403953552 ms.
9°- 0.09999999403953552 ms.
10°- 0.09999999403953552 ms.
11°- 0 ms.
12°- 0.09999999403953552 ms.
13°- 0 ms.
14°- 0.10000000894069672 ms.
15°- 0.10000000894069672 ms.
16°- 0.10000000894069672 ms.
17°- 0.09999999403953552 ms.
18°- 0.10000000894069672 ms.
19°- 0.10000000894069672 ms.
20°- 0.09999999403953552 ms.

6) Calcule a média dos tempos de execução do algoritmo ORDENAÇÃO POR INSERÇÃO.
Média é = 0.005000000596046447.

7) Pesquise sobre COMPLEXIDADE DE ALGORITMOS e escreva em suas palavras porque dois algoritmos que exibem o MESMO RESULTADO tem tempos de execução e média de execução tão diferentes.
Devido a sua complexidade, por exemplo, uma complexidade baixa terá um tempo de execução mais rápida, a eficiência da implementação, otimização do compilador, depende de algumas características do hardware e da entrada de dados.


Desafio 2: Esse desafio consiste em explicar o funcionamento de cada um dos dois códigos que foram enviados para execução.

Ordenação de força bruta:

A ordenação por força bruta é um método simples e direto de ordenar elementos em uma lista. Nesse método, todos os elementos são comparados entre si, um por um, e são rearranjados de acordo com a ordem desejada. A ordenação por força bruta geralmente envolve um algoritmo de complexidade quadrática, o que significa que o tempo de execução aumenta quadrado com o tamanho da entrada.

Um exemplo comum de ordenação por força bruta é o algoritmo de ordenação de seleção. Neste algoritmo, a lista é percorrida repetidamente e, em cada iteração, o menor (ou maior) elemento é selecionado e movido para a posição apropriada. Embora seja simples de entender e implementar, a ordenação por força bruta pode ser muito ineficiente para listas grandes, já que o número de comparações aumenta rapidamente com o tamanho da lista.

Devido à sua ineficiência em comparação com outros algoritmos de ordenação mais sofisticados, como mergesort, quicksort e heapsort, a ordenação por força bruta é raramente usada em situações reais, exceto para listas muito pequenas ou para fins educacionais.

Ordenação por inserção:

A ordenação por inserção é um algoritmo de ordenação simples e eficiente, especialmente para listas pequenas ou parcialmente ordenadas. Neste algoritmo, os elementos da lista são inseridos um por um em uma posição apropriada já ordenada, resultando em uma lista gradualmente ordenada.

O processo de ordenação por inserção pode ser entendido da seguinte maneira:

Inicialmente, o primeiro elemento da lista é considerado ordenado.
Em cada iteração subsequente, um novo elemento é selecionado e inserido na posição correta na parte ordenada da lista.
O novo elemento é comparado com os elementos na parte ordenada da lista, movendo-se para a direita até encontrar a posição correta.
Esse processo é repetido até que todos os elementos tenham sido inseridos na posição correta, resultando em uma lista completamente ordenada.
A ordenação por inserção é eficiente para listas pequenas porque requer um número mínimo de movimentos de elementos. No entanto, para listas grandes ou inversamente ordenadas, pode ser menos eficiente do que outros algoritmos de ordenação, como mergesort, quicksort ou heapsort, que têm uma complexidade de tempo melhor em média.








